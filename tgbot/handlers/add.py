from datetime import datetime, timedelta

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ContentType

from tgbot.misc.states import Recipe
from tgbot.services.add_a_recipe_service import add_a_recipe_service


async def set_water(message: Message):
    await message.answer(
        "‚ùó –ü–æ–∫–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –≤ –Ω–µ–º –Ω–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.\n\n–ü–æ—ç—Ç–æ–º—É –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–æ–º –≤–∏–¥–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —É–∫–∞–∑–∞–Ω–æ –≤ (–¢–ï–ö–°–¢–ï –í –°–ö–û–ë–ö–ê–•)")
    await message.answer(
        "üåä –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≤–æ–¥—ã, —á–∏—Å–ª–æ –≤ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–∞—Ö:")
    await Recipe.water_volume.set()


async def set_coffee(message: Message, state: FSMContext):
    answer = message.text
    await state.update_data(water_volume=answer)
    await message.answer("‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ñ–µ, –≤ –≥—Ä–∞–º–º–∞—Ö (–ß–ò–°–õ–û):")
    await Recipe.amount_of_coffee.set()


async def set_water_temperature(message: Message, state: FSMContext):
    answer = message.text
    await state.update_data(amount_of_coffee=answer)
    await message.answer("üå°Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤–æ–¥—ã, –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è (–ß–ò–°–õ–û):")
    await Recipe.water_temperature.set()


async def set_brew_time(message: Message, state: FSMContext):
    answer = message.text
    await state.update_data(water_temperature=answer)
    await message.answer("‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è –∑–∞–≤–∞—Ä–∏–≤–∞–Ω–∏—è, –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ß–ò–°–õ–û):")
    await Recipe.brew_time.set()


async def set_grind_size(message: Message, state: FSMContext):
    answer = message.text
    await state.update_data(brew_time=answer)
    await message.answer("üìè –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–º–æ–ª–∞, –≤ —â–µ–ª—á–∫–∞—Ö (–ß–ò–°–õ–û):")
    await Recipe.grind_size.set()


async def set_coffee_type(message: Message, state: FSMContext):
    answer = message.text
    await state.update_data(grind_size=answer)
    await message.answer("ü´ò –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∑–∞ –∫–æ—Ñ–µ (–¢–ï–ö–°–¢):")
    await Recipe.coffee_type.set()


async def set_description(message: Message, state: FSMContext):
    answer = message.text
    await state.update_data(coffee_type=answer)
    await message.answer("üí¨ –û–ø–∏—à–∏—Ç–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è (–¢–ï–ö–°–¢):")
    await Recipe.description.set()


async def set_grade(message: Message, state: FSMContext):
    answer = message.text
    await state.update_data(description=answer)
    await message.answer("‚≠ê –ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10 (–ß–ò–°–õ–û):")
    await Recipe.grade.set()


async def set_photo(message: Message, state: FSMContext):
    answer = message.text
    await state.update_data(grade=answer)
    await message.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–§–û–¢–û):")
    await Recipe.photo_url.set()


async def recipe_result(message: Message, state: FSMContext):
    answer = message.photo[-1].file_id
    now = datetime.utcnow() + timedelta(hours=3)
    await state.update_data(photo_url=answer)
    await state.update_data(name=f"–†–µ—Ü–µ–ø—Ç –æ—Ç {now.strftime('%d.%m.%Y –≤ %H:%M')}")
    data = await state.get_data()
    resp, code = add_a_recipe_service(message, data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É 'result'
    await message.answer(resp['result'])

    if code != 200:
        await state.reset_state(with_data=False)
    else:
        await state.reset_state(with_data=False)


def register_add_recipe(dp: Dispatcher):
    dp.register_message_handler(set_water, commands=["add"], state="*")
    dp.register_message_handler(set_coffee, state=Recipe.water_volume)
    dp.register_message_handler(set_water_temperature, state=Recipe.amount_of_coffee)
    dp.register_message_handler(set_brew_time, state=Recipe.water_temperature)
    dp.register_message_handler(set_grind_size, state=Recipe.brew_time)
    dp.register_message_handler(set_coffee_type, state=Recipe.grind_size)
    dp.register_message_handler(set_description, state=Recipe.coffee_type)
    dp.register_message_handler(set_grade, state=Recipe.description)
    dp.register_message_handler(set_photo, state=Recipe.grade)
    dp.register_message_handler(recipe_result, content_types=ContentType.PHOTO, state=Recipe.photo_url)
